plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.freefair.lombok" version "8.4"
}

group "org.polypheny"

if (isSnapshot.toBoolean()) {
    version = versionMajor + "." + versionMinor + "." + versionPatch + "-SNAPSHOT"
} else {
    version = versionMajor + "." + versionMinor + "." + versionPatch
}

repositories {
    mavenCentral()
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "${buildDir}/webjars-content"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}


dependencies {

    // Guava
    implementation group: "com.google.guava", name: "guava", version: guava_version // Apache 2.0

    // JSON libs
    implementation group: "com.google.code.gson", name: "gson", version: gson_version // Apache 2.0
    implementation group: "com.github.cliftonlabs", name: "json-simple", version: json_simple_version // Apache 2.0

    // REST requests (for connector lib)
    implementation group: "com.konghq", name: "unirest-java", version: unirest_version // MIT
    implementation group: "org.java-websocket", name: "Java-WebSocket", version: java_websocket_version // MIT

    // -- Testing --
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: jupiter_version
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: jupiter_version
}

test {
    useJUnitPlatform()
}


java {
    withSourcesJar()
    withJavadocJar()
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Implementation-Version": project.version
        attributes "Multi-Release": "true"
        attributes "Version": project.version
    }
}
//artifacts {
//    archives jar // regular jar containing only the compiled source
//    archives sourcesJar // jar file containing the java doc files
//    archives javadocJar // jar file containing the source files
//}


publishing {
    publications {
        centralPublication(MavenPublication) { publication ->
            from components.java
            //artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
            //artifact source: javadocJar, classifier: 'javadoc', extension: 'jar'
            pom {
                name = 'Polypheny Control Connector'
                description = 'A library that connects to Polypheny Control and enables remote control.'
                url = 'https://polypheny.org'
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                scm {
                    connection = "https://github.com/polypheny/Polypheny-Control.git"
                    url = "https://github.com/polypheny/Polypheny-Control"
                }
                developers {
                    developer {
                        id = 'polypheny'
                        name = 'Polypheny'
                        email = 'mail@polypheny.org'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/polypheny/polypheny-control"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
//task generatePom(group: 'publishing', dependsOn: "generatePomFileFor${project.name.capitalize()}Publication")

afterEvaluate {
    publishing.publications.centralPublication.artifacts.each { artifact ->
        println "Artifact: ${artifact.file} Classifier: ${artifact.classifier}"
    }
}


signing {
    required { gradle.taskGraph.hasTask("publish") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.centralPublication
}
