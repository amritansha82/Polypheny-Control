buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'app.cash.licensee:licensee-gradle-plugin:1.8.0'
    }
}

plugins {
    id "java-library"
    //id "application"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.freefair.lombok" version "8.4"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

apply plugin: 'app.cash.licensee'


import org.jetbrains.gradle.ext.Application

group "org.polypheny"

if (isSnapshot.toBoolean()) {
    version = versionMajor + "." + versionMinor + "." + versionPatch + "-SNAPSHOT"
} else {
    version = versionMajor + "." + versionMinor + "." + versionPatch
}


var mainClassName = "org.polypheny.control.main.Main"


repositories {
    mavenCentral()
    maven {
        // Gradle tooling API
        url "https://repo.gradle.org/gradle/libs-releases/"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "${buildDir}/webjars-content"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    sourceCompatibility = "11"
    targetCompatibility = "11"
}


configurations {
    webjars
}


dependencies {
    implementation project(":control-connector")

    // Log4J
    implementation group: "org.slf4j", name: "slf4j-api", version: slf4j_version // MIT
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j2-impl", version: log4j_version // Apache 2.0
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: log4j_version // Apache 2.0

    // Configuration management
    implementation group: "com.typesafe", name: "config", version: typesafe_config_version // Apache 2.0

    // Apache Commons Stuff
    implementation group: "org.apache.commons", name: "commons-lang3", version: commons_lang_version // Apache 2.0
    implementation group: "commons-io", name: "commons-io", version: commons_io_version // Apache 2.0

    implementation group: "com.google.guava", name: "guava", version: guava_version // Apache 2.0

    // CLI Library
    implementation group: "com.github.rvesse", name: "airline", version: airline_version // Apache 2.0

    // HTTP Server
    implementation group: "io.javalin", name: "javalin", version: javalin_version // Apache 2.0

    // REST requests (for connector lib)
    implementation group: "com.konghq", name: "unirest-java", version: unirest_version // MIT
    implementation group: "org.java-websocket", name: "Java-WebSocket", version: java_websocket_version // MIT

    // JSON libs
    implementation group: "com.google.code.gson", name: "gson", version: gson_version // Apache 2.0
    implementation group: "com.github.cliftonlabs", name: "json-simple", version: json_simple_version // Apache 2.0

    // Kill process tree in Windows
    implementation group: "org.jvnet.winp", name: "winp", version: winp_version // MIT

    // Git and Gradle integration
    implementation group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: jgit_version // EDL
    implementation group: "org.gradle", name: "gradle-tooling-api", version: gradle_tooling_api_version // Apache 2.0

    // Webjar (JS libraries)
    webjars group: "org.webjars", name: "font-awesome", version: font_awesome_version // MIT, SIL OFL, and CC BY licenses
    webjars group: "org.webjars", name: "jquery", version: jquery_version // MIT
    webjars group: "org.webjars.npm", name: "jquery-serializejson", version: serializejson_version // MIT
    webjars group: "org.webjars.npm", name: "ansi_up", version: ansi_up_version // MIT
    webjars group: "org.webjars.npm", name: "tooltipster", version: tooltipster_version // MIT


    // -- Testing --
    testImplementation project(":control-connector")
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: jupiter_version
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: jupiter_version
}


test {
    useJUnitPlatform()
}


/**
 * License check
 */
licensee {
    allow('Apache-2.0')
    allow('MIT')

    allowDependency('org.java-websocket', 'Java-WebSocket', '1.5.4') { because 'MIT License' }
    allowDependency('org.eclipse.jgit', 'org.eclipse.jgit', '6.7.0.202309050840-r') { because 'Eclipse Distribution License' }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "The Polypheny Project (polypheny.org)"
        attributes "Implementation-Version": project.version
        attributes "Multi-Release": "true"
        attributes "Version": project.version
        attributes "Main-Class": mainClassName
        attributes "Add-Opens": "java.base/java.lang"
    }
}
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}*/
shadowJar {
    archiveClassifier.set('')
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    //archives sourcesJar // jar file containing the java doc files
    //archives javadocJar // jar file containing the source files
}


task extractWebjars(type: Copy) {
    configurations.webjars.each {jar ->
        from zipTree(jar)
        into "$buildDir/webjars"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    doLast {
        copy {
            from "${buildDir}/webjars/META-INF/resources/webjars"
            into file("${buildDir}/webjars-content/static")
        }
    }
}
classes.dependsOn(extractWebjars)

task testWithAuth(type: Test) {
    systemProperty "config.auth.local", "true"
    description = "Runs test with local authentication enabled."
    group = "verification"
}
testWithAuth.dependsOn(testClasses)

task testWithoutAuth(type: Test) {
    systemProperty "config.auth.local", "false"
    description = "Runs test with local authentication disabled."
    group = "verification"
}
testWithoutAuth.dependsOn(testClasses)

test {
    systemProperty "config.auth.local", "false"
}
test.dependsOn(testWithAuth)



//////////////
// IntelliJ //
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        settings {
            runConfigurations {
                "Polypheny Control (headless)"(Application) {
                    mainClass = mainClassName
                    moduleName = "polypheny-control.main"
                    programParameters = 'control'
                }
                "Polypheny Control (tray)"(Application) {
                    mainClass = mainClassName
                    moduleName = "polypheny-control.main"
                    programParameters = 'tray'
                }
            }
            copyright {
                useDefault = "ApacheLicense"
                profiles {
                    ApacheLicense {
                        notice = 'Copyright 2019-$today.year The Polypheny Project\n' +
                                '\n' +
                                'Licensed under the Apache License, Version 2.0 (the \"License\");\n' +
                                'you may not use this file except in compliance with the License.\n' +
                                'You may obtain a copy of the License at\n' +
                                '\n' +
                                'http://www.apache.org/licenses/LICENSE-2.0\n' +
                                '\n' +
                                'Unless required by applicable law or agreed to in writing, software\n' +
                                'distributed under the License is distributed on an \"AS IS\" BASIS,\n' +
                                'WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' +
                                'See the License for the specific language governing permissions and\n' +
                                'limitations under the License.'
                        keyword = "Copyright"
                    }
                }
            }
        }
    }
}
